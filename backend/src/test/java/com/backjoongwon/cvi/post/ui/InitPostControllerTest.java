package com.backjoongwon.cvi.post.ui;

import com.backjoongwon.cvi.ApiDocument;
import com.backjoongwon.cvi.auth.domain.authorization.SocialProvider;
import com.backjoongwon.cvi.comment.domain.Comment;
import com.backjoongwon.cvi.comment.dto.CommentResponse;
import com.backjoongwon.cvi.post.application.PostService;
import com.backjoongwon.cvi.post.domain.VaccinationType;
import com.backjoongwon.cvi.post.dto.PostRequest;
import com.backjoongwon.cvi.post.dto.PostResponse;
import com.backjoongwon.cvi.user.application.UserService;
import com.backjoongwon.cvi.user.domain.AgeRange;
import com.backjoongwon.cvi.user.domain.JwtTokenProvider;
import com.backjoongwon.cvi.user.domain.User;
import com.backjoongwon.cvi.user.dto.UserResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.BDDMockito.given;

@DisplayName("게시글 컨트롤러 Mock 테스트")
@WebMvcTest(controllers = PostController.class)
abstract class InitPostControllerTest extends ApiDocument {

    protected static final Long USER_ID = 1L;
    protected static final Long POST_ID = 1L;
    protected static final String ACCESS_TOKEN = "{ACCESS TOKEN generated by JWT}";
    protected static final Long COMMENT_ID = 1L;
    protected static final String BEARER = "Bearer ";

    @MockBean
    protected PostService postService;

    @MockBean
    protected UserService userService;

    @MockBean
    protected JwtTokenProvider jwtTokenProvider;

    protected User user;
    protected User anotherUser;
    protected PostRequest request;
    protected UserResponse userResponse;
    protected PostResponse postResponse;
    protected List<CommentResponse> commentResponses;

    @BeforeEach
    void setUp() {
        user = User.builder()
                .id(USER_ID)
                .nickname("user")
                .ageRange(AgeRange.TEENS)
                .profileUrl("naver.com/profile")
                .socialId("{Unique ID received from social provider}")
                .socialProvider(SocialProvider.NAVER)
                .build();
        anotherUser = User.builder()
                .id(USER_ID + 1)
                .nickname("another_user")
                .ageRange(AgeRange.TWENTIES)
                .profileUrl("kakao.com/profile")
                .socialId("{Unique ID received from social provider}")
                .socialProvider(SocialProvider.KAKAO)
                .build();

        request = new PostRequest("글 내용", VaccinationType.PFIZER);

        userResponse = UserResponse.of(user, null);
        postResponse = PostResponse.of(1L, userResponse, "내용", 1,
                1, true, null, VaccinationType.PFIZER, LocalDateTime.now());

        Comment comment1 = Comment.builder().id(COMMENT_ID).content("댓글1").user(user).createdAt(LocalDateTime.now()).build();
        Comment comment2 = Comment.builder().id(COMMENT_ID + 1).content("댓글2").user(anotherUser).createdAt(LocalDateTime.now()).build();
        commentResponses = Arrays.asList(CommentResponse.of(comment1), CommentResponse.of(comment2));

        given(jwtTokenProvider.isValidToken(ACCESS_TOKEN)).willReturn(true);
        given(jwtTokenProvider.getPayload(ACCESS_TOKEN)).willReturn(String.valueOf(user.getId()));
        given(userService.findUserById(any(Long.class))).willReturn(user);
    }
}
