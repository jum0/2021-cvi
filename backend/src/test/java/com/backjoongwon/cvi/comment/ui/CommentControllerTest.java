package com.backjoongwon.cvi.comment.ui;

import com.backjoongwon.cvi.ApiDocument;
import com.backjoongwon.cvi.auth.domain.authorization.SocialProvider;
import com.backjoongwon.cvi.comment.application.CommentService;
import com.backjoongwon.cvi.comment.dto.CommentRequest;
import com.backjoongwon.cvi.common.exception.UnAuthorizedException;
import com.backjoongwon.cvi.user.domain.AgeRange;
import com.backjoongwon.cvi.user.domain.JwtTokenProvider;
import com.backjoongwon.cvi.user.domain.RequestUser;
import com.backjoongwon.cvi.user.domain.User;
import com.backjoongwon.cvi.user.dto.UserResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.ResultActions;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.BDDMockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@DisplayName("댓글 컨트롤러 Mock 테스트")
@WebMvcTest(controllers = CommentController.class)
class CommentControllerTest extends ApiDocument {

    private static final Long USER_ID = 1L;
    private static final Long COMMENT_ID = 1L;
    private static final String ACCESS_TOKEN = "{ACCESS TOKEN generated by JWT}";
    private static final String BEARER = "Bearer ";

    @MockBean
    private CommentService commentService;

    @MockBean
    private JwtTokenProvider jwtTokenProvider;

    private User user;
    private UserResponse userResponse;

    @BeforeEach
    void setUp() {
        user = User.builder()
                .id(USER_ID)
                .ageRange(AgeRange.TEENS)
                .nickname("user")
                .socialProvider(SocialProvider.NAVER)
                .profileUrl("naver.com/profile")
                .socialId("{Unique ID received from social provider}")
                .build();
        userResponse = UserResponse.of(user, null);

        given(jwtTokenProvider.isValidToken(ACCESS_TOKEN)).willReturn(true);
        given(jwtTokenProvider.getPayload(ACCESS_TOKEN)).willReturn(String.valueOf(user.getId()));
    }

    @DisplayName("댓글 수정 - 성공")
    @Test
    void putComment() throws Exception {
        //given
        CommentRequest updateRequest = new CommentRequest("수정된 좋은 정보 공유 감사해요 ㅎㅎ");
        willDoNothing().given(commentService).update(anyLong(), any(CommentRequest.class), any(RequestUser.class));
        //when
        ResultActions response = 댓글_수정_요청(COMMENT_ID, updateRequest, BEARER + ACCESS_TOKEN);
        //then
        댓글_수정_성공함(response);
    }

    @DisplayName("댓글 수정 - 실패 - 작성자가 아닌 사용자가 수정 요청")
    @Test
    void putCommentFailureWhenWrongUser() throws Exception {
        //given
        CommentRequest updateRequest = new CommentRequest("수정된 좋은 정보 공유 감사해요 ㅎㅎ");
        willThrow(new UnAuthorizedException("댓글 작성자가 아닙니다.")).given(commentService).update(anyLong(),
                any(CommentRequest.class), any(RequestUser.class));
        //when
        ResultActions response = 댓글_수정_요청(COMMENT_ID, updateRequest, BEARER + "another_user_token");
        //then
        댓굴_수정_실패함(response);
    }

    @DisplayName("댓글 삭제 - 성공")
    @Test
    void deleteComment() throws Exception {
        //given
        willDoNothing().given(commentService).delete(anyLong(), any(RequestUser.class));
        //when
        ResultActions response = 댓글_삭제_요청(COMMENT_ID, BEARER + ACCESS_TOKEN);
        //then
        댓글_삭제_성공함(response);
    }

    @DisplayName("댓글 삭제 - 실패 - 작성자가 아닌 사용자가 삭제 요청 ")
    @Test
    void deleteCommentWhenWrongUser() throws Exception {
        //given
        willThrow(new UnAuthorizedException("댓글 작성자가 아닙니다.")).given(commentService).delete(anyLong(), any(RequestUser.class));
        //when
        ResultActions response = 댓글_삭제_요청(COMMENT_ID, BEARER + "another_user_token");
        //then
        댓글_삭제_실패함(response);
    }

    private ResultActions 댓글_수정_요청(Long commentId, CommentRequest request, String accessToken) throws Exception {
        return mockMvc.perform(put("/api/v1/comments/{id}", commentId)
                .contentType(MediaType.APPLICATION_JSON)
                .content(toJson(request))
                .header(HttpHeaders.AUTHORIZATION, accessToken)
        );
    }

    private void 댓글_수정_성공함(ResultActions response) throws Exception {
        response.andExpect(status().isNoContent())
                .andDo(print())
                .andDo(toDocument("comment-update"));
    }

    private void 댓굴_수정_실패함(ResultActions response) throws Exception {
        response.andExpect(status().isUnauthorized())
                .andDo(print())
                .andDo(toDocument("comment-update-failure"));
    }

    private ResultActions 댓글_삭제_요청(Long commentId, String accessToken) throws Exception {
        return mockMvc.perform(delete("/api/v1/comments/{id}", commentId)
                .header(HttpHeaders.AUTHORIZATION, accessToken));
    }

    private void 댓글_삭제_성공함(ResultActions response) throws Exception {
        response.andExpect(status().isNoContent())
                .andDo(print())
                .andDo(toDocument("comment-delete"));
    }

    private void 댓글_삭제_실패함(ResultActions response) throws Exception {
        response.andExpect(status().isUnauthorized())
                .andDo(print())
                .andDo(toDocument("comment-delete-failure"));
    }
}
