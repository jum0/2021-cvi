bootJar { enabled = false }
jar { enabled = true }

dependencies {
    implementation project(path:':common-cvi', configuration: 'default')
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'
    implementation 'org.hibernate.validator:hibernate-validator:6.2.0.Final'

    //migration
    implementation 'org.flywaydb:flyway-core:7.11.2'

}

jacocoTestReport {
    dependsOn test // 리포트가 만들어지기 전 테스트 실행되어야 한다.
    reports {
        html.enabled true
        xml.enabled true
        csv.enabled false
    }

    def Qdomains = []
    for (qPattern in "**/QA".."**/QZ") {
        Qdomains.add(qPattern + "*")
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, // 리포트 결과에 제외시킬 디렉토리
                    exclude: ['**/Sort*',
                              '**/Filter*',
                              '**/PostRepositoryImpl*',
                              '**/ImageType*'] + Qdomains)
        }))
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification { // 코드 커버리지 측정항목 시행
    def Qdomains = []

    for (qPattern in "*.QA".."*.QZ") {
        Qdomains.add(qPattern + "*")
    }

    violationRules { // 위반 규칙
        rule {
            enabled = true
            element = 'GROUP'

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
    }
}

sonarqube {
    properties {
        property "sonar.exclusions", "**/*Test*.*, **/Q*.java, **/*Doc*.java, **/DataLoader.java, **/Sort.java, **/Filter.java, **/PostRepositoryImpl.java, **/ImageType.java"
    }
}
