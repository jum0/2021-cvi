plugins {
    id 'org.springframework.boot' version '2.5.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
    id 'org.sonarqube' version '3.0'
    id 'org.asciidoctor.convert' version '1.5.8'
    id 'application'
}

application {
    mainClass = 'com.cvi.CentralVaccinationInformationApplication'
}

subprojects {
    group = 'com.backjoongwon'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '1.8'

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'
    apply plugin: 'org.sonarqube'

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    repositories {
        mavenCentral()
    }

    /**
     * jacoco 관련 설정
     */
    jacoco {
        toolVersion = '0.8.7'
    }

    test {
        useJUnitPlatform()
        finalizedBy 'jacocoTestReport' // 테스트가 먼저 실행되고 리포트가 작동된다.
    }

    jacocoTestReport {
        dependsOn test // 리포트가 만들어지기 전 테스트 실행되어야 한다.
        reports {
            html.enabled true
            xml.enabled true
            csv.enabled false
        }

        def Qdomains = []
        for (qPattern in "**/QA".."**/QZ") {
            Qdomains.add(qPattern + "*")
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, // 리포트 결과에 제외시킬 디렉토리
                        exclude: ['**/DataLoader*',
                                  '**/CviApplication*',
                                  '**/DummyData*',
                                  '**/KakaoProfile*',
                                  '**/NaverProfile*'] + Qdomains)
            }))
        }
        finalizedBy 'jacocoTestCoverageVerification'
    }

    /**
     * Sonar 관련 설정
     */
    sonarqube {
        properties {
            property "sonar.sources", "src/main/java"
            property "sonar.tests", "src/test/java"
        }
    }

/*    tasks.named('sonarqube').configure {
        dependsOn jacocoTestCoverageVerification
    }*/
}

def queryDslProjects = [project(':domain-cvi')]
configure(queryDslProjects){
    dependencies {
        implementation 'com.querydsl:querydsl-jpa'
        implementation 'com.querydsl:querydsl-core'
        annotationProcessor("com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa") // querydsl JPAAnnotationProcessor 사용 지정
        annotationProcessor("jakarta.persistence:jakarta.persistence-api") // java.lang.NoClassDefFoundError(javax.annotation.Entity) 발생 대응
        annotationProcessor("jakarta.annotation:jakarta.annotation-api") // java.lang.NoClassDefFoundError (javax.annotation.Generated) 발생 대응
    }

    /**
     * 인텔리제이 Annotation processor 에 생성되는 'src/main/generated' 디렉터리 삭제
     */
    task cleanGeneatedDir(type: Delete) { // 인텔리제이 annotation processor 가 생성한 Q클래스가 clean 태스크로 삭제되는 게 불편하다면 둘 중에 하나를 선택
        delete file('src/main/generated')
    }
}


def asciidoctorConfigureProjects = [project(':app-cvi-api')]
configure(asciidoctorConfigureProjects){
    apply plugin: "org.asciidoctor.convert"

    dependencies {
        asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.5.RELEASE'
        testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc:2.0.5.RELEASE'
    }

    ext {
        snippetsDir = file('build/generated-snippets')
    }

    test {
        outputs.dir snippetsDir
        useJUnitPlatform()
    }

    asciidoctor {
        inputs.dir snippetsDir
        dependsOn test
    }

    bootJar {
        dependsOn asciidoctor
        from ("${asciidoctor.outputDir}/html5") {
            into 'static/docs'
        }
    }
}

project(':domain-cvi-scheduler')